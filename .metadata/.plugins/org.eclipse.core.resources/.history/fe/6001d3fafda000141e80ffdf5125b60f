package uptodate.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.swing.JPanel;

import uptodate.logic.Tile;

public class GraphicsManager {
	private static final String FONT_NAME = "Arial";
	public static final int TILE_SIZE = 64;
	public static final int TILES_MARGIN = 16;
	
	public static Graphics2D initializeGraphics(Graphics oneDG){
		Graphics2D g = ((Graphics2D) oneDG);
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,
				RenderingHints.VALUE_STROKE_NORMALIZE);
		return g;
	}

	public static void drawTile(Graphics2D g, Tile tile, int x, int y) {
		
		int value = tile.getValue();
		int xOffset = offsetCoors(x);
		int yOffset = offsetCoors(y);
		g.setColor(tile.getBackground());
		g.fillRoundRect(xOffset, yOffset, TILE_SIZE, TILE_SIZE, 14, 14);
		g.setColor(tile.getForeground());
		final int size = value < 100 ? 36 : value < 1000 ? 32 : 24;
		final Font font = new Font(FONT_NAME, Font.BOLD, size);
		g.setFont(font);

		String s = String.valueOf(value);
		final FontMetrics fm = getFontMetrics(font);

		final int w = fm.stringWidth(s);
		final int h = -(int) fm.getLineMetrics(s, g).getBaselineOffsets()[2];

		if (value != 0)
			g.drawString(s, xOffset + (TILE_SIZE - w) / 2, yOffset + TILE_SIZE
					- (TILE_SIZE - h) / 2 - 2);
	

	}
	
	public static void printScore(Graphics2D g, int score, int windowWidth, int windowHeight){
		g.setFont(new Font(FONT_NAME, Font.PLAIN, 18));
		g.drawString("Score: " + score, (windowWidth / 2) + 30, windowHeight - 35);
	}
	
	public static void checkGameStatus(Graphics2D g, boolean win, boolean lose, int windowWidth, int windowHeight){
		if (win || lose) {
			g.setColor(new Color(255, 255, 255, 30));
			g.fillRect(0, 0, windowWidth, windowHeight);
			g.setColor(new Color(78, 139, 202));
			g.setFont(new Font(FONT_NAME, Font.BOLD, 48));
			if (win) {
				g.drawString("You won!", windowWidth / 2 - 102, windowHeight / 2 - 50);
			}
			else if (lose) {
				g.drawString("Game over!", windowWidth / 2 - 120, windowHeight / 2 - 100);
				g.drawString("You lose!", windowWidth / 2 - 106, windowHeight / 2 - 50);
			}
			
			g.setFont(new Font(FONT_NAME, Font.PLAIN, 16));
			g.setColor(new Color(128, 128, 128, 128));
			g.drawString("Press ESC to play again", 40, windowHeight - 30);
		}
	}
	
	private static int offsetCoors(int arg) {
		return arg * (TILES_MARGIN + TILE_SIZE) + TILES_MARGIN;
	}

	
}
